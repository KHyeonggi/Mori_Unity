using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// Enemy ??????? ???? ?? ?? ???¢¬? ??????? ??????????.
public class Enemy : MonoBehaviour
{
    // public ??????: ??¥ï??? ???? ?????? ???? ?????
    public float speed; // ???? ??? ???
    public float moveDistance; // ?¡À???? ????? ??? ????
    public float health; // ???? ???? ???
    public float maxHealth; // ???? ??? ???
    public RuntimeAnimatorController[] animCon; // ??????? ?????? ?ò÷
    public Rigidbody2D target; // ????? ??? ?¡À?????? Rigidbody2D

    // ???? ???? ??????
    public bool isLive; // ???? ???????? ????

    // Unity ??????? ???? ??????
    public Rigidbody2D rigid; // ???? Rigidbody2D
    public Collider2D coll; // ???? ?úô ???
    public Animator anim; // ???? ????????
    public SpriteRenderer spriter; // ???? ????????? ??????
    public WaitForFixedUpdate wait; // FixedUpdate?? ??? ?????? Wait ???

    // Awake ?????: ??????? ????
    void Awake()
    {
        coll = GetComponent<Collider2D>();
        rigid = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
        spriter = GetComponent<SpriteRenderer>();
        wait = new WaitForFixedUpdate();
    }

    // FixedUpdate: ???? ???? ???? ????
    void FixedUpdate()
    {
        // ???? ??????? ????, Hit ??????? ???¢Ò?? ???? ???
        if (!isLive || anim.GetCurrentAnimatorStateInfo(0).IsName("Hit") || !GameManager.instance.gameStarted)
        {
            return;
        }

        // ????? ???????? ???? ??? ????? ?????? ???
        if (target == null)
        {
            Debug.LogWarning("Target is not assigned for the enemy.");
            return;
        }

        // ?????? ??? ???
        float distanceToTarget = Vector2.Distance(rigid.position, target.position);

        // ????? moveDistance ???? ???? ??? ???? ???
        if (distanceToTarget <= moveDistance)
        {
            Vector2 dirVec = target.position - rigid.position; // ??? ???? ???
            Vector2 nextVec = dirVec.normalized * speed * Time.fixedDeltaTime; // ??? ???? ???
            rigid.MovePosition(rigid.position + nextVec); // ??? ???
        }
        rigid.velocity = Vector2.zero; // ??? ?? ??? ????
    }

    // LateUpdate: ?????? ???? ????
    void LateUpdate()
    {
        if (!isLive || target == null)
            return;

        // ???? ?¡À???? ????? ????????? ???? ????
        spriter.flipX = target.position.x < rigid.position.x;
    }

    // OnEnable: ???? ?????? ?? ????
    void OnEnable()
    {
        // GameManager?¥ê??? ?¡À???? ??? ????
        if (GameManager.instance != null && GameManager.instance.player != null)
        {
            target = GameManager.instance.player.GetComponent<Rigidbody2D>();
        }
        else
        {
            Debug.LogWarning("Player target not found for the enemy.");
        }

        // ?? ???? ????
        isLive = true;
        health = maxHealth;
        coll.enabled = true;
        rigid.simulated = true;
        spriter.sortingOrder = 2;
        anim.SetBool("Dead", false);
    }

    // Init: ???? ?????? ????
    public void Init(SpawnData data)
    {
        anim.runtimeAnimatorController = animCon[data.spritType]; // ??????? ?????? ????
        speed = data.speed; // ??? ??? ????
        moveDistance = data.moveDistance; // ??? ??? ????
        maxHealth = data.health; // ??? ??? ????
        health = data.health; // ???? ??? ????
    }

    // OnTriggerEnter2D: ?úô ???? ???
    void OnTriggerEnter2D(Collider2D collision)
    {
        // ?????? ?úô?? ???
        if (!collision.CompareTag("Bullet") || !isLive)
            return;

        // ????? ????????? ??? ????
        health -= collision.GetComponent<Bullet>().damage;
        StartCoroutine(KnockBack()); // ??? ??? ???

        if (health > 0)
        {
            anim.SetTrigger("Hit"); // Hit ??????? ????
        }
        else
        {
            // ???? ????? ?? ???
            isLive = false;
            coll.enabled = false;
            rigid.simulated = false;
            spriter.sortingOrder = 1;
            anim.SetBool("Dead", true);
            GameManager.instance.GetExp(); // ????? ???
            AudioManager.instance.PlaySfx(AudioManager.Sfx.Dead);
            StartCoroutine(HandleDeath()); // ???? ??? ???? ????
        }
    }

    // HandleDeath: ???? ???? ???
    IEnumerator HandleDeath()
    {
        yield return new WaitForSeconds(1.0f); // 1?? ???
        Dead(); // Dead ????? ???
    }

    // KnockBack: ?¡À????¥ê??? ??? ???
    public IEnumerator KnockBack()
    {
        yield return wait;

        if (GameManager.instance.player != null)
        {
            Vector3 playerPos = GameManager.instance.player.transform.position; // ?¡À???? ???
            Vector3 dirVec = transform.position - playerPos; // ??? ???? ???
            rigid.AddForce(dirVec.normalized * 3, ForceMode2D.Impulse); // ?? ???
        }
    }

    // EnemyDeathHandler: ???? ?????? ????? ?????????
    public delegate void EnemyDeathHandler(GameObject enemy);
    public event EnemyDeathHandler OnEnemyDeath;

    // Dead: ?? ???? ????
    void Dead()
    {
        if (OnEnemyDeath != null)
        {
            OnEnemyDeath(gameObject); // ???? ?????? ???
        }

        gameObject.SetActive(false); // ?? ??????
    }

    // OnDestroy: ???? ?©¥??? ?? ???
    void OnDestroy()
    {
        if (OnEnemyDeath != null)
        {
            OnEnemyDeath(gameObject); // ???? ?????? ???
        }
    }

    // SetTarget: ?¡À???? ??? ????
    public void SetTarget(Rigidbody2D playerTarget)
    {
        target = playerTarget;
        Debug.Log($"Enemy target set: {name} -> {target.name}");
    }
}
